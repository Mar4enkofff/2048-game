{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCGA,IADI,EACA,EAAQ,EAGN,EAAQ,SAAS,aAAa,CAAC,SAC/B,EAAS,SAAS,aAAa,CAAC,UAChC,EAAe,SAAS,aAAa,CAAC,kBACtC,EAAa,SAAS,aAAa,CAAC,gBACpC,EAAc,SAAS,aAAa,CAAC,iBAwD3C,SAAS,IACP,GAAK,IAML,IAFA,IAAI,EAAQ,CAAA,EAEL,CAAC,GAAO,CACb,IAAM,EAAM,KAAK,KAAK,CAAC,AAtEd,EAsEc,KAAK,MAAM,IAC5B,EAAO,KAAK,KAAK,CAAC,AAtEZ,EAsEY,KAAK,MAAM,IAEnC,GAAI,AAAqB,IAArB,CAAK,CAAC,EAAI,CAAC,EAAK,CAAQ,CAC1B,IAAM,EAAW,EAAM,IAAI,CAAC,EAAI,CAAC,KAAK,CAAC,EAAK,AAE5C,CAAA,CAAK,CAAC,EAAI,CAAC,EAAK,CAsDb,KAAK,MAAM,IAAM,GAAM,EAAI,EArD9B,EAAS,SAAS,CAAG,CAAK,CAAC,EAAI,CAAC,EAAK,CACrC,EAAS,SAAS,CAAC,GAAG,CAAC,eAAgC,MAAA,CAAjB,CAAK,CAAC,EAAI,CAAC,EAAK,GAEtD,EAAQ,CAAA,CACV,CACF,CACF,CAEA,SAAS,IACP,OAAO,EAAM,IAAI,CAAC,SAAA,CAAlB,EAAyB,OAAA,EAAI,IAAI,CAAC,SAAA,CAAT,EAAiB,MAAA,CAAC,C,E,EAC7C,CAEA,SAAS,EAAW,CAAI,CAAE,CAAG,EAC3B,EAAK,SAAS,CAAG,GACjB,EAAK,SAAS,CAAG,aAEb,EAAM,IACR,EAAK,SAAS,CAAG,EAA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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar board;\nvar score = 0;\nvar rows = 4;\nvar columns = 4;\nvar field = document.querySelector(\"tbody\");\nvar button = document.querySelector(\"button\");\nvar messageStart = document.querySelector(\".message-start\");\nvar messageWin = document.querySelector(\".message-win\");\nvar messageLose = document.querySelector(\".message-lose\");\nbutton.addEventListener(\"click\", function() {\n    score = 0;\n    document.querySelector(\".game-score\").innerText = score;\n    if (button.classList.contains(\"start\")) {\n        button.classList.remove(\"start\");\n        button.classList.add(\"restart\");\n        button.innerText = \"Restart\";\n        messageStart.classList.add(\"hidden\");\n        setGame();\n    } else {\n        messageWin.classList.add(\"hidden\");\n        messageLose.classList.add(\"hidden\");\n        setGame();\n    }\n});\ndocument.addEventListener(\"keyup\", function(e) {\n    var prevBoard = _to_consumable_array(board).toString();\n    if (e.code === \"ArrowLeft\" || e.code === \"ArrowRight\") slideHorizontally(e.code);\n    if (e.code === \"ArrowUp\" || e.code === \"ArrowDown\") {\n        transpose();\n        slideHorizontally(e.code);\n        transpose();\n    }\n    updateBoard();\n    var currentBoard = _to_consumable_array(board).toString();\n    if (prevBoard !== currentBoard) setNewNumber();\n    document.querySelector(\".game-score\").innerText = score;\n});\nfunction setGame() {\n    board = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    updateBoard();\n    setNewNumber();\n    setNewNumber();\n}\nfunction setNewNumber() {\n    if (!hasEmptyCell()) return;\n    var found = false;\n    while(!found){\n        var row = Math.floor(Math.random() * rows);\n        var cell = Math.floor(Math.random() * columns);\n        if (board[row][cell] === 0) {\n            var gameCell = field.rows[row].cells[cell];\n            board[row][cell] = randomizeNumber();\n            gameCell.innerText = board[row][cell];\n            gameCell.classList.add(\"field-cell--\".concat(board[row][cell]));\n            found = true;\n        }\n    }\n}\nfunction hasEmptyCell() {\n    return board.some(function(row) {\n        return row.some(function(cell) {\n            return !cell;\n        });\n    });\n}\nfunction updateCell(cell, num) {\n    cell.innerText = \"\";\n    cell.className = \"field-cell\";\n    if (num > 0) {\n        cell.innerText = num.toString();\n        cell.classList.add(\"field-cell--\".concat(num));\n        if (num === 2048) messageWin.classList.remove(\"hidden\");\n    }\n    looseGame();\n}\nfunction filterZero(row) {\n    return row.filter(function(num) {\n        return num !== 0;\n    });\n}\nfunction slide(row) {\n    var filteredRow = filterZero(row);\n    for(var i = 0; i < filteredRow.length - 1; i++)if (filteredRow[i] === filteredRow[i + 1]) {\n        filteredRow[i] *= 2;\n        filteredRow[i + 1] = 0;\n        score += filteredRow[i];\n    }\n    filteredRow = filterZero(filteredRow);\n    while(filteredRow.length < columns)filteredRow.push(0);\n    return filteredRow;\n}\nfunction randomizeNumber() {\n    return Math.random() >= 0.9 ? 4 : 2;\n}\nfunction looseGame() {\n    if (hasEmptyCell()) return;\n    for(var row = 0; row < rows; row++)for(var cell = 0; cell < columns - 1; cell++){\n        var isNextSame = board[row][cell] === board[row][cell + 1];\n        var isBelowSame = board[cell][row] === board[cell + 1][row];\n        if (isNextSame || isBelowSame) return;\n    }\n    messageLose.classList.remove(\"hidden\");\n}\nfunction transpose() {\n    board = board[0].map(function(cell, i) {\n        return board.map(function(row) {\n            return row[i];\n        });\n    });\n}\nfunction slideHorizontally(side) {\n    for(var row = 0; row < rows; row++){\n        var newRow = board[row];\n        if (side === \"ArrowLeft\" || side === \"ArrowUp\") newRow = slide(newRow);\n        if (side === \"ArrowRight\" || side === \"ArrowDown\") {\n            newRow.reverse();\n            newRow = slide(newRow);\n            newRow.reverse();\n        }\n        board[row] = newRow;\n        for(var cell = 0; cell < columns; cell++){\n            var gameCell = field.rows[row].cells[cell];\n            var num = board[row][cell];\n            updateCell(gameCell, num);\n        }\n    }\n}\nfunction updateBoard() {\n    board.forEach(function(row, rowIndex) {\n        row.forEach(function(cell, cellIndex) {\n            updateCell(field.rows[rowIndex].cells[cellIndex], cell);\n        });\n    });\n}\n\n//# sourceMappingURL=index.ad3d4bbd.js.map\n","'use strict';\n\nlet board;\nlet score = 0;\nconst rows = 4;\nconst columns = 4;\nconst field = document.querySelector('tbody');\nconst button = document.querySelector('button');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nbutton.addEventListener('click', () => {\n  score = 0;\n  document.querySelector('.game-score').innerText = score;\n\n  if (button.classList.contains('start')) {\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.innerText = 'Restart';\n    messageStart.classList.add('hidden');\n    setGame();\n  } else {\n    messageWin.classList.add('hidden');\n    messageLose.classList.add('hidden');\n    setGame();\n  }\n});\n\ndocument.addEventListener('keyup', (e) => {\n  const prevBoard = [...board].toString();\n\n  if (e.code === 'ArrowLeft' || e.code === 'ArrowRight') {\n    slideHorizontally(e.code);\n  }\n\n  if (e.code === 'ArrowUp' || e.code === 'ArrowDown') {\n    transpose();\n    slideHorizontally(e.code);\n    transpose();\n  }\n\n  updateBoard();\n\n  const currentBoard = [...board].toString();\n\n  if (prevBoard !== currentBoard) {\n    setNewNumber();\n  }\n\n  document.querySelector('.game-score').innerText = score;\n});\n\nfunction setGame() {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  updateBoard();\n  setNewNumber();\n  setNewNumber();\n}\n\nfunction setNewNumber() {\n  if (!hasEmptyCell()) {\n    return;\n  }\n\n  let found = false;\n\n  while (!found) {\n    const row = Math.floor(Math.random() * rows);\n    const cell = Math.floor(Math.random() * columns);\n\n    if (board[row][cell] === 0) {\n      const gameCell = field.rows[row].cells[cell];\n\n      board[row][cell] = randomizeNumber();\n      gameCell.innerText = board[row][cell];\n      gameCell.classList.add(`field-cell--${board[row][cell]}`);\n\n      found = true;\n    }\n  }\n}\n\nfunction hasEmptyCell() {\n  return board.some(row => row.some(cell => !cell));\n}\n\nfunction updateCell(cell, num) {\n  cell.innerText = '';\n  cell.className = 'field-cell';\n\n  if (num > 0) {\n    cell.innerText = num.toString();\n    cell.classList.add(`field-cell--${num}`);\n\n    if (num === 2048) {\n      messageWin.classList.remove('hidden');\n    }\n  }\n\n  looseGame();\n}\n\nfunction filterZero(row) {\n  return row.filter(num => num !== 0);\n}\n\nfunction slide(row) {\n  let filteredRow = filterZero(row);\n\n  for (let i = 0; i < filteredRow.length - 1; i++) {\n    if (filteredRow[i] === filteredRow[i + 1]) {\n      filteredRow[i] *= 2;\n      filteredRow[i + 1] = 0;\n      score += filteredRow[i];\n    }\n  }\n\n  filteredRow = filterZero(filteredRow);\n\n  while (filteredRow.length < columns) {\n    filteredRow.push(0);\n  }\n\n  return filteredRow;\n}\n\nfunction randomizeNumber() {\n  return Math.random() >= 0.9 ? 4 : 2;\n}\n\nfunction looseGame() {\n  if (hasEmptyCell()) {\n    return;\n  }\n\n  for (let row = 0; row < rows; row++) {\n    for (let cell = 0; cell < columns - 1; cell++) {\n      const isNextSame = board[row][cell] === board[row][cell + 1];\n      const isBelowSame = board[cell][row] === board[cell + 1][row];\n\n      if (isNextSame || isBelowSame) {\n        return;\n      }\n    }\n  }\n\n  messageLose.classList.remove('hidden');\n}\n\nfunction transpose() {\n  board = board[0].map((cell, i) => board.map(row => row[i]));\n}\n\nfunction slideHorizontally(side) {\n  for (let row = 0; row < rows; row++) {\n    let newRow = board[row];\n\n    if (side === 'ArrowLeft' || side === 'ArrowUp') {\n      newRow = slide(newRow);\n    }\n\n    if (side === 'ArrowRight' || side === 'ArrowDown') {\n      newRow.reverse();\n      newRow = slide(newRow);\n      newRow.reverse();\n    }\n\n    board[row] = newRow;\n\n    for (let cell = 0; cell < columns; cell++) {\n      const gameCell = field.rows[row].cells[cell];\n      const num = board[row][cell];\n\n      updateCell(gameCell, num);\n    }\n  }\n}\n\nfunction updateBoard() {\n  board.forEach((row, rowIndex) => {\n    row.forEach((cell, cellIndex) => {\n      updateCell(field.rows[rowIndex].cells[cellIndex], cell);\n    });\n  });\n}\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","board","score","field","document","querySelector","button","messageStart","messageWin","messageLose","setNewNumber","hasEmptyCell","found","row","Math","floor","random","cell","gameCell","rows","cells","innerText","classList","add","concat","some","updateCell","num","className","remove","looseGame","columns","isNextSame","isBelowSame","filterZero","filter","slide","filteredRow","push","transpose","map","slideHorizontally","side","newRow","reverse","updateBoard","forEach","rowIndex","cellIndex","addEventListener","contains","e","prevBoard","code"],"version":3,"file":"index.ad3d4bbd.js.map"}